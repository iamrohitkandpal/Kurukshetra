import React, { useState, useEffect } from 'react';
import axios from 'axios';

const VulnerabilityProgress = () => {
  const [categories, setCategories] = useState([]);
  const [progress, setProgress] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    fetchProgress();
  }, []);

  const fetchProgress = async () => {
    try {
      // A01: IDOR vulnerability in the API
      const [categoriesRes, progressRes] = await Promise.all([
        axios.get('/api/progress/categories'),
        axios.get('/api/progress/summary/1')  // User ID hardcoded
      ]);
      
      setCategories(categoriesRes.data);
      setProgress(progressRes.data);
    } catch (err) {
      setError('Failed to load progress data');
    } finally {
      setLoading(false);
    }
  };

  const markCompleted = async (categoryId, vulnerabilityName) => {
    try {
      // A01: IDOR vulnerability in the API
      await axios.post('/api/progress/complete', {
        categoryId,
        vulnerabilityName
      });
      fetchProgress();
    } catch (err) {
      setError('Failed to update progress');
    }
  };

  const resetProgress = async () => {
    try {
      // A01: IDOR vulnerability
      await axios.post('/api/progress/reset', {
        userId: 1  // Using the same hardcoded user ID as in fetchProgress
      });
      fetchProgress();
      setSuccess('Progress reset successfully');
    } catch (err) {
      setError('Failed to reset progress');
    }
  };

  if (loading) return <div>Loading...</div>;

  return (
    <div className="card mb-4">
      <div className="card-header">
        <h3>Vulnerability Progress Tracking</h3>
      </div>
      <div className="card-body">
        {error && <div className="alert alert-danger">{error}</div>}
        {success && <div className="alert alert-success">{success}</div>}

        <button 
          className="btn btn-danger mb-3"
          onClick={resetProgress}
        >
          Reset Progress
        </button>

        <div className="row">
          {Object.entries(categories).map(([id, name]) => {
            const categoryProgress = progress.find(p => p.category === id) || { completed: 0, total: 0 };
            const percentage = ((categoryProgress.completed / categoryProgress.total) * 100) || 0;
            
            return (
              <div key={id} className="col-md-6 mb-4">
                <div className="card">
                  <div className="card-header">
                    <h4>{name}</h4>
                  </div>
                  <div className="card-body">
                    <div className="progress mb-3">
                      <div
                        className="progress-bar"
                        role="progressbar"
                        style={{ width: `${percentage}%` }}
                        aria-valuenow={percentage}
                        aria-valuemin="0"
                        aria-valuemax="100"
                      >
                        {Math.round(percentage)}%
                      </div>
                    </div>
                    <p className="text-muted">
                      {categoryProgress.completed} of {categoryProgress.total} vulnerabilities exploited
                    </p>
                    <div className="list-group">
                      {/* Vulnerabilities would be listed here */}
                      <button 
                        className="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                        onClick={() => markCompleted(id, 'example_vulnerability')}
                      >
                        Example Vulnerability
                        <span className="badge bg-success">Complete</span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityProgress;