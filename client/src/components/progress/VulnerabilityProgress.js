import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import VulnerabilityCard from '../common/VulnerabilityCard';

const VulnerabilityProgress = () => {
  const [categories, setCategories] = useState([]);
  const [progress, setProgress] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState('');

  useEffect(() => {
    fetchProgress();
  }, [fetchProgress]);

  const fetchProgress = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      // A01: IDOR vulnerability in the API
      const [categoriesRes, progressRes] = await Promise.all([
        axios.get('/api/progress/categories'),
        axios.get('/api/progress/summary/1')  // User ID hardcoded
      ]);
      
      setCategories(categoriesRes.data);
      setProgress(progressRes.data);
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to load progress data');
      console.error('Progress fetch error:', err);
    } finally {
      setLoading(false);
    }
  }, []);

  const markCompleted = async (categoryId, vulnerabilityName) => {
    try {
      // A01: IDOR vulnerability in the API
      await axios.post('/api/progress/complete', {
        categoryId,
        vulnerabilityName
      });
      fetchProgress();
    } catch (err) {
      setError('Failed to update progress');
    }
  };

  const resetProgress = async () => {
    try {
      // A01: IDOR vulnerability
      await axios.post('/api/progress/reset', {
        userId: 1  // Using the same hardcoded user ID as in fetchProgress
      });
      fetchProgress();
      setSuccess('Progress reset successfully');
    } catch (err) {
      setError('Failed to reset progress');
    }
  };

  if (loading) return <div>Loading...</div>;

  return (
    <div className="card mb-4">
      <div className="card-header">
        <h3>Vulnerability Progress Tracking</h3>
      </div>
      <div className="card-body">
        {error && (
          <div className="alert alert-danger">
            <h4 className="alert-heading">Error</h4>
            <p>{error}</p>
            <button 
              className="btn btn-outline-danger"
              onClick={() => fetchProgress()}
            >
              Retry
            </button>
          </div>
        )}

        {loading ? (
          <div className="row">
            {[1, 2, 3, 4].map((n) => (
              <div key={n} className="col-md-6 mb-4">
                <div className="card">
                  <div className="card-body">
                    <div className="skeleton-loader w-50"></div>
                    <div className="skeleton-loader w-75 mt-2"></div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <>
            {success && <div className="alert alert-success">{success}</div>}

            <button 
              className="btn btn-danger mb-3"
              onClick={resetProgress}
            >
              Reset Progress
            </button>

            <div className="row">
              {Object.entries(categories).map(([id, name]) => (
                <div key={id} className="col-md-6 mb-4">
                  <VulnerabilityCard
                    category={name}
                    description={`Exploit ${name} vulnerabilities to complete this category`}
                    status={progress.some(p => p.category === id && p.completed) ? 'active' : 'inactive'}
                    onComplete={() => markCompleted(id, 'example_vulnerability')}
                  />
                </div>
              ))}
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityProgress;