KURUKSHETRA TECHNICAL DOCUMENTATION
===================================

Table of Contents
----------------
1. Project Overview
2. Architecture
3. Database Design
4. API Endpoints
5. Authentication System
6. Vulnerability Implementation Details
7. Development Guidelines
8. Deployment Guidelines
9. Testing

1. PROJECT OVERVIEW
------------------
Kurukshetra is an intentionally vulnerable web application designed for cybersecurity training and education. It implements the OWASP Top 10 (2021) vulnerabilities to provide a safe, controlled environment for security practitioners to improve their skills.

2. ARCHITECTURE
--------------
The application follows a client-server architecture:

Frontend:
- React.js for UI components
- React Router for navigation
- Context API for global state management
- Axios for API requests
- Bootstrap for styling

Backend:
- Node.js with Express.js
- Dual database support: SQLite and MongoDB
- JWT for authentication
- Winston for logging

The application is designed to allow switching between SQL and NoSQL database backends dynamically to demonstrate different injection techniques.

3. DATABASE DESIGN
-----------------
3.1 SQLite Schema

Tables:
- users: User accounts with authentication details
- products: Product catalog data
- feedback: User-submitted feedback
- files: Metadata for uploaded files
- vulnerability_logs: Tracks exploited vulnerabilities
- security_questions: User security questions and answers
- webhooks: Registered webhook endpoints
- progress: User progress in identifying vulnerabilities

3.2 MongoDB Collections

The MongoDB schema mirrors the SQLite schema but utilizes document structure:
- users
- products
- feedback
- files
- vulnerabilityLogs
- securityQuestions
- webhooks
- progress

4. API ENDPOINTS
---------------
Base URL: /api

Authentication:
- POST /auth/register - Create a new user account
- POST /auth/login - Authenticate user and receive token
- POST /auth/reset-password - Request password reset
- POST /auth/reset-password/confirm - Confirm password reset

Users:
- GET /users/profile - Get current user profile
- PUT /users/profile - Update profile information
- GET /users/personal-data - Get sensitive user data (intentionally vulnerable)
- PUT /users/personal-data - Update sensitive data
- POST /users/api-key - Generate API key
- DELETE /users/api-key - Revoke API key

Products:
- GET /products - List products (vulnerable to injection)
- GET /products/:id - View product details
- POST /products - Create new product
- PUT /products/:id - Update product
- DELETE /products/:id - Delete product

Files:
- POST /files/upload - Upload files (vulnerable to path traversal)
- GET /files - List uploaded files
- GET /files/:filename - Download file (vulnerable)

Feedback:
- POST /feedback - Submit feedback (vulnerable to XSS)
- GET /feedback - List feedback entries

Admin:
- GET /admin/users - List all users (broken access control)
- DELETE /admin/users/:id - Delete user
- GET /admin/system-info - Get system information (command injection)
- GET /admin/system/stats - Get system statistics
- GET /admin/logs - Get system logs

Database:
- POST /db/switch - Switch active database type
- GET /db/type - Get current database type
- GET /db/vulnerabilities - Get available vulnerabilities

Webhooks:
- GET /webhooks - List registered webhooks
- POST /webhooks - Register new webhook
- POST /webhooks/test/:id - Test webhook (SSRF vulnerability)
- DELETE /webhooks/:id - Delete webhook

Progress:
- GET /progress/summary - Get vulnerability progress summary
- POST /progress/complete - Mark vulnerability as completed
- POST /progress/reset - Reset progress

5. AUTHENTICATION SYSTEM
----------------------
Kurukshetra uses JWT (JSON Web Tokens) for authentication with intentional vulnerabilities:

- Tokens are stored in localStorage (vulnerable to XSS)
- Token verification is weak and can be bypassed
- Password requirements are minimal
- Some endpoints have missing authorization checks

Login flow:
1. User submits credentials
2. Server authenticates and generates JWT
3. Token is returned to client
4. Client stores token in localStorage
5. Token is sent with subsequent requests

The authentication system is designed to demonstrate A07:2021 – Authentication & Identification Failures.

6. VULNERABILITY IMPLEMENTATION DETAILS
-------------------------------------
Kurukshetra implements all OWASP Top 10 (2021) vulnerabilities:

A01:2021 – Broken Access Control
- Missing access controls on admin endpoints
- Insecure direct object references (IDOR)
- Horizontal privilege escalation possibilities

A02:2021 – Cryptographic Failures
- Sensitive data stored and transmitted in plain text
- Weak encryption algorithms
- Insecure token handling

A03:2021 – Injection
- SQL Injection in product search and login
- NoSQL Injection in MongoDB mode
- Command Injection in admin system info endpoint
- XSS in feedback display

A04:2021 – Insecure Design
- Lack of rate limiting
- Predictable resource locations
- No account lockout

A05:2021 – Security Misconfiguration
- Verbose error messages exposing stack traces
- Default credentials
- Unnecessary features enabled

A06:2021 – Vulnerable Components
- Intentionally outdated dependencies
- Insecure deserialization

A07:2021 – Authentication & Identification Failures
- Weak password requirements
- Insecure JWT handling
- Security question weaknesses

A08:2021 – Software & Data Integrity Failures
- Unsigned updates
- Insecure deserialization

A09:2021 – Security Logging & Monitoring Failures
- Inadequate logging of security events
- Logs with sensitive information

A10:2021 – Server-Side Request Forgery (SSRF)
- Webhook testing endpoint
- Update checker functionality

7. DEVELOPMENT GUIDELINES
------------------------
Environment Setup:
1. Clone repository
2. Copy .env.example to .env and configure
3. Install dependencies with npm install
4. Initialize database with npm run setup
5. Run with npm run dev

Coding Standards:
- Use consistent indentation (2 spaces)
- Follow camelCase for variables and functions
- Use PascalCase for classes and components
- Include JSDoc comments for functions
- Mark intentional vulnerabilities with comments

Adding New Vulnerabilities:
1. Create a new route or modify existing one
2. Add appropriate middleware
3. Document the vulnerability in comments
4. Update vulnerability checker to detect exploitation
5. Update frontend to demonstrate the vulnerability
6. Add progress tracking

8. DEPLOYMENT GUIDELINES
----------------------
Kurukshetra is intended for educational purposes and should never be deployed to production or exposed to the internet.

For Local Deployment:
1. Configure environment variables
2. Run database setup script
3. Start server with npm start

For Classroom Setting:
1. Set up on isolated network
2. Verify MongoDB security if used
3. Consider using containers for isolation

9. TESTING
---------
Test Suite:
- Jest for unit and integration tests
- Supertest for API testing

Running Tests:
- npm test - Run all tests
- npm test -- --watch - Run in watch mode

Adding Tests:
1. Create test files with .test.js extension
2. Focus on testing core functionality
3. Avoid testing intentional vulnerabilities directly
- Predictable business logic

A05: Security Misconfiguration
- Verbose error messages
- Development features left enabled
- Default credentials
- Unnecessary features enabled

A06: Vulnerable Components
- Outdated dependencies
- Insecure file upload component

A07: Authentication Failures
- Weak password requirements
- Client-side JWT parsing
- Improper session management

A08: Software & Data Integrity Failures
- No integrity checks for updates
- Insecure deserialization

A09: Security Logging Failures
- Insufficient logging
- Logs contain sensitive data
- No alerts for suspicious activity

A10: SSRF
- Webhook testing feature
- Update checker in admin panel

6. DEPLOYMENT CONSIDERATIONS
---------------------------

This application is for educational purposes only and should NEVER be deployed to production environments. For study purposes, deploy on:
- Local development machine
- Private network
- Properly isolated virtual machine

7. EXTENDING THE APPLICATION
---------------------------

To add new vulnerabilities:
1. Create a new component/route demonstrating the issue
2. Document in QUES_AND_ANS.md
3. Add corresponding backend endpoint if needed
4. Update progress tracking system

8. SECURITY TESTING
------------------

The application is designed to be tested with:
- Manual penetration testing tools
- OWASP ZAP
- Burp Suite
- SQLmap
- Other security testing tools

Remember: This application intentionally contains security flaws for educational purposes. Never use it in a production environment.
