#!/usr/bin/env node
/**
 * Kurukshetra - OWASP Top 10 Vulnerability Testing Suite
 * This script validates that all intended vulnerabilities are properly implemented
 */

const fs = require('fs');
const path = require('path');

console.log('🔍 Kurukshetra Security Validation Suite');
console.log('==========================================\n');

const vulnerabilityChecks = [
  {
    name: 'A01: Broken Access Control',
    checks: [
      () => checkFileExists('src/pages/api/users/[id].ts', 'User data access endpoint'),
      () => checkCodeContains('src/pages/api/users/[id].ts', 'req.user.id !== id', 'Basic access control check'),
    ]
  },
  {
    name: 'A02: Cryptographic Failures',
    checks: [
      () => checkCodeContains('src/lib/db.ts', 'password?: string', 'Plaintext password storage'),
      () => checkCodeContains('src/lib/vulnerabilities.ts', 'Base64', 'Weak encryption demo'),
    ]
  },
  {
    name: 'A03: Injection Vulnerabilities',
    checks: [
      () => checkCodeContains('src/pages/api/users/search.ts', 'searchUsers', 'Search endpoint for injection'),
      () => checkCodeContains('src/lib/db.ts', 'LIKE \'%${term}%\'', 'SQL injection point'),
    ]
  },
  {
    name: 'A04: Insecure Design',
    checks: [
      () => checkCodeContains('src/lib/vulnerabilities.ts', 'insecure-design', 'Insecure design vulnerability'),
    ]
  },
  {
    name: 'A05: Security Misconfiguration',
    checks: [
      () => checkEnvVariable('NEXT_PUBLIC_LEAKED_API_KEY', 'Exposed environment variable'),
    ]
  },
  {
    name: 'A06: Vulnerable Components',
    checks: [
      () => checkCodeContains('src/lib/vulnerabilities.ts', 'CVE-2022-24999', 'Vulnerable dependency reference'),
    ]
  },
  {
    name: 'A07: Authentication Failures',
    checks: [
      () => checkCodeContains('src/lib/auth.ts', 'a-very-weak-and-predictable-secret', 'Weak JWT secret'),
    ]
  },
  {
    name: 'A08: Software & Data Integrity',
    checks: [
      () => checkCodeContains('src/lib/vulnerabilities.ts', 'data-integrity-failures', 'Data integrity vulnerability'),
    ]
  },
  {
    name: 'A09: Security Logging Failures',
    checks: [
      () => checkCodeContains('src/lib/vulnerabilities.ts', 'logging-failures', 'Logging failures vulnerability'),
    ]
  },
  {
    name: 'A10: SSRF',
    checks: [
      () => checkFileExists('src/pages/api/ssrf/fetch.ts', 'SSRF endpoint'),
      () => checkCodeContains('src/pages/api/ssrf/fetch.ts', 'file://', 'SSRF file protocol support'),
    ]
  }
];

let totalTests = 0;
let passedTests = 0;

function checkFileExists(filePath, description) {
  totalTests++;
  const fullPath = path.join(process.cwd(), filePath);
  if (fs.existsSync(fullPath)) {
    console.log(`✅ ${description}: File exists`);
    passedTests++;
    return true;
  } else {
    console.log(`❌ ${description}: File missing at ${filePath}`);
    return false;
  }
}

function checkCodeContains(filePath, searchString, description) {
  totalTests++;
  const fullPath = path.join(process.cwd(), filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.log(`❌ ${description}: File not found`);
    return false;
  }
  
  const content = fs.readFileSync(fullPath, 'utf8');
  if (content.includes(searchString)) {
    console.log(`✅ ${description}: Implementation found`);
    passedTests++;
    return true;
  } else {
    console.log(`❌ ${description}: Implementation missing (looking for: ${searchString})`);
    return false;
  }
}

function checkEnvVariable(varName, description) {
  totalTests++;
  const envPath = path.join(process.cwd(), '.env.local');
  
  if (!fs.existsSync(envPath)) {
    console.log(`❌ ${description}: .env.local file not found`);
    return false;
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  if (envContent.includes(varName)) {
    console.log(`✅ ${description}: Environment variable configured`);
    passedTests++;
    return true;
  } else {
    console.log(`❌ ${description}: Environment variable missing`);
    return false;
  }
}

// Run all vulnerability checks
vulnerabilityChecks.forEach((vuln, index) => {
  console.log(`\n${index + 1}. ${vuln.name}`);
  console.log('-'.repeat(50));
  vuln.checks.forEach(check => check());
});

console.log('\n==========================================');
console.log(`🎯 Test Results: ${passedTests}/${totalTests} checks passed`);

if (passedTests === totalTests) {
  console.log('🎉 All vulnerability implementations verified!');
  console.log('🚀 Kurukshetra is ready for security training.');
  process.exit(0);
} else {
  console.log('⚠️  Some vulnerabilities need attention.');
  console.log('📝 Please review the failed checks above.');
  process.exit(1);
}
